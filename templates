scheme-mode

(defn "(define (" p ")" n> r> ")")
(def "(define " p " " r> ")")
(let "(let (" p ")" n> r> ")")
(let* "(let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)

clojure-mode

(defn "(defn " p n> "[" p "]" n> r> ")")
(def "(def " p " " r> ")")
(let "(let [" p "]" n> r> ")")

fennel-mode

(local "(local " p " " p ")")
(var "(var " p " " p ")")
(fn "(fn " p " [" p "]" n> r> ")")
(lambda "(lambda [" p "]" n> r> ")")
(ipairs "(each [i v (ipairs " p ")]" n> r> ")")

emacs-lisp-mode

(lambda "(lambda (" p ")" n> r> ")")
(autoload & ";;;###autoload")
(pt "(point)")
(var "(defvar " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(alias "(defalias '" p " '" p ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(iflet "(if-let (" p ")" n> r> ")")
(whenlet "(when-let (" p ")" n> r> ")")
(iflet* "(if-let* (" p ")" n> r> ")")
(whenlet* "(when-let* (" p ")" n> r> ")")
(andlet* "(and-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " (p "scrutinee") n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(let* "(let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(advice "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
        "(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
(provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name))) " ends here" n)
(log "(message \"LOG %s " (s sexp) ": %S"
     "\" (format-time-string \"%X\") " sexp ")")

c-mode c-ts-mode

(inc "#include <" q ">")
(def "#define (" q ")")

(struct "struct " p n " {" n> q n "}")

(main "int" n "main(int argc, char *argv[])" n "{" n> q n> "return 0;" n "}")

(if "if (" p ")" n> "{" n> q n> "}")
(elif "else if (" p ")" n> "{" n> q n> "}")
(else "else" n> "{" n> q n> "}")

(for "for (" p "; " p "; " p ")" n> "{" n> q n> "}")
(while "while (" p ")" n> "{" n> q n> "}")
(switch "switch (" p ")" n> "{" n> q n> "}")

(printf "printf (\"" q  "\\n\");")


eshell-mode

(for "for " (p "i") " in " p " { " q " }")
(while "while { " p " } { " q " }")
(until "until { " p " } { " q " }")
(if "if { " p " } { " q " }")
(ife "if { " p " } { " p " } { " q " }")
(unl "unless { " p " } { " q " }")
(unle "unless { " p " } { " p " } { " q " }")

org-mode

(caption "#+caption: ")
(drawer ":" p ":" n r ":end:")
(begin "#+begin_" (s name) n> r> n "#+end_" name)
(quote "#+begin_quote" n> r> n "#+end_quote")
(sidenote "#+begin_sidenote" n> r> n "#+end_sidenote")
(marginnote "#+begin_marginnote" n> r> n "#+end_marginnote")
(example "#+begin_example" n> r> n "#+end_example")
(center "#+begin_center" n> r> n "#+end_center")
(ascii "#+begin_export ascii" n> r> n "#+end_export")
(html "#+begin_export html" n> r> n "#+end_export")
(latex "#+begin_export latex" n> r> n "#+end_export")
(comment "#+begin_comment" n> r> n "#+end_comment")
(verse "#+begin_verse" n> r> n "#+end_verse")
(src "#+begin_src " q n r n "#+end_src")
(elisp "#+begin_src emacs-lisp" n r n "#+end_src" :post (org-edit-src-code))
(scheme "#+begin_src scheme" n r n "#+end_src" :post (org-edit-src-code))
(inlsrc "src_" p "{" q "}")
(title "#+title: " p n "#+author: " p n "#+language: " p n)

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
